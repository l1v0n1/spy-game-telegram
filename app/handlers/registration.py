from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext, CommandHandler, CallbackQueryHandler, Filters, MessageHandler
import logging
import datetime

from app.models.database import get_session, User, Game, GamePlayer, GameRound
from app.config.config import GAME_STATES, MIN_PLAYERS, MAX_PLAYERS, ROLES
from app.utils.game_logic import assign_roles

logger = logging.getLogger(__name__)

# Dictionary to store temporary game registration data
active_registrations = {}

def start_command(update: Update, context: CallbackContext) -> None:
    """
    Start the bot and display welcome message.
    """
    message = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É Spy Sketch!\n\n"
        "–≠—Ç–æ –≥—Ä—É–ø–ø–æ–≤–∞—è –∏–≥—Ä–∞-–¥–µ–¥—É–∫—Ü–∏—è —Å —Ç–≤–æ—Ä—á–µ—Å–∫–∏–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏ –¥–ª—è 6-20 –∏–≥—Ä–æ–∫–æ–≤.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /join —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n"
        "–ö–æ–≥–¥–∞ –≤—Å–µ –±—É–¥—É—Ç –≥–æ—Ç–æ–≤—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /startgame —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É.\n"
        "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help."
    )
    update.message.reply_text(message)

def help_command(update: Update, context: CallbackContext) -> None:
    """
    Display help information.
    """
    help_text = (
        "üìã –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/join - –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n"
        "/startgame - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n"
        "/endgame - –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É\n"
        "/rules - –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã\n"
        "/stats - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
        "/leaderboard - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤\n\n"
        "üìù –ö–∞–∫ –∏–≥—Ä–∞—Ç—å:\n"
        "1. –í—Å–µ –∂–µ–ª–∞—é—â–∏–µ –∏–≥—Ä–æ–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π /join\n"
        "2. –ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤, –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /startgame\n"
        "3. –ö–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ –ø–æ–ª—É—á–∏—Ç —Å–µ–∫—Ä–µ—Ç–Ω—É—é —Ä–æ–ª—å –≤ –ª–∏—á–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏\n"
        "4. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –æ—Ç –±–æ—Ç–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ –∏–≥—Ä–æ–≤—ã—Ö —ç—Ç–∞–ø–æ–≤\n"
    )
    update.message.reply_text(help_text)

def rules_command(update: Update, context: CallbackContext) -> None:
    """
    Display game rules.
    """
    rules_text = (
        "üìå –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã Spy Sketch:\n\n"
        "1. –ò–≥—Ä–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è 6-20 –∏–≥—Ä–æ–∫–æ–≤.\n"
        "2. –ö–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ –ø–æ–ª—É—á–∞–µ—Ç –æ–¥–Ω—É –∏–∑ —Ä–æ–ª–µ–π:\n"
        "   - –õ–æ—è–ª—å–Ω—ã–π –∞–≥–µ–Ω—Ç: –≤–∞—à–∞ —Ü–µ–ª—å - –≤—ã—è–≤–∏—Ç—å —à–ø–∏–æ–Ω–æ–≤\n"
        "   - –®–ø–∏–æ–Ω: –≤–∞—à–∞ —Ü–µ–ª—å - –æ—Å—Ç–∞—Ç—å—Å—è –Ω–µ–∑–∞–º–µ—á–µ–Ω–Ω—ã–º –∏ —Å–∞–±–æ—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä—É\n"
        "   - –î–≤–æ–π–Ω–æ–π –∞–≥–µ–Ω—Ç: –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ –Ω–∞ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã, –Ω–æ –ø–æ–±–µ–∂–¥–∞–µ—Ç–µ —Å –ª–æ—è–ª—å–Ω—ã–º–∏\n\n"
        "3. –ò–≥—Ä–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ä–∞—É–Ω–¥–æ–≤, –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –∏–º–µ–µ—Ç —ç—Ç–∞–ø—ã:\n"
        "   - –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞: –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏–µ —Å —Ä–æ–ª—è–º–∏ –∏ –∑–∞–¥–∞–Ω–∏—è–º–∏\n"
        "   - –¢–≤–æ—Ä—á–µ—Å–∫–∏–π —ç—Ç–∞–ø: –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π (—Ä–∏—Å–æ–≤–∞–Ω–∏–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç)\n"
        "   - –û–±—Å—É–∂–¥–µ–Ω–∏–µ: –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –ø–æ–∏—Å–∫ —à–ø–∏–æ–Ω–æ–≤\n"
        "   - –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ: –≤—ã–±–æ—Ä –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º–æ–≥–æ –≤ —à–ø–∏–æ–Ω–∞–∂–µ\n\n"
        "4. –ü–æ—Å–ª–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è '—É—Å—Ç—Ä–∞–Ω—è–µ—Ç—Å—è' –æ–¥–∏–Ω –∏–≥—Ä–æ–∫, –∏ –∏–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è.\n"
        "5. –ò–≥—Ä–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –≤—Å–µ —à–ø–∏–æ–Ω—ã —É—Å—Ç—Ä–∞–Ω–µ–Ω—ã (–ø–æ–±–µ–¥–∞ –ª–æ—è–ª—å–Ω—ã—Ö) –∏–ª–∏ –∫–æ–≥–¥–∞ —à–ø–∏–æ–Ω–æ–≤ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –±–æ–ª—å—à–µ –∏–ª–∏ —Å—Ç–æ–ª—å–∫–æ –∂–µ, —Å–∫–æ–ª—å–∫–æ –ª–æ—è–ª—å–Ω—ã—Ö (–ø–æ–±–µ–¥–∞ —à–ø–∏–æ–Ω–æ–≤).\n"
    )
    update.message.reply_text(rules_text)

def join_command(update: Update, context: CallbackContext) -> None:
    """
    Register a player for the game.
    """
    chat_id = update.effective_chat.id
    user = update.effective_user
    
    # Check if we're in a group chat
    if update.effective_chat.type not in ['group', 'supergroup']:
        update.message.reply_text("–≠—Ç–∞ –∏–≥—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö!")
        return
    
    # Initialize registration for this chat if it doesn't exist
    if chat_id not in active_registrations:
        active_registrations[chat_id] = []
    
    # Check if user already registered
    if any(reg_user.id == user.id for reg_user in active_registrations[chat_id]):
        update.message.reply_text(f"{user.first_name}, –≤—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –∏–≥—Ä—ã!")
        return
    
    # Check if there's a game in progress
    session = get_session()
    try:
        existing_game = session.query(Game).filter(
            Game.chat_id == chat_id,
            Game.finished_at.is_(None)
        ).first()
        
        if existing_game and existing_game.state != GAME_STATES['IDLE']:
            update.message.reply_text("–í —ç—Ç–æ–º —á–∞—Ç–µ —É–∂–µ –∏–¥–µ—Ç –∏–≥—Ä–∞! –î–æ–∂–¥–∏—Ç–µ—Å—å –µ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
            return
        
        # Add user to registration
        active_registrations[chat_id].append(user)
        
        # Get current player count
        player_count = len(active_registrations[chat_id])
        
        update.message.reply_text(
            f"{user.first_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ! "
            f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–≥—Ä–æ–∫–æ–≤: {player_count}/{MIN_PLAYERS} –º–∏–Ω. | {MAX_PLAYERS} –º–∞–∫—Å.\n"
            f"–ö–æ–≥–¥–∞ –≤—Å–µ –±—É–¥—É—Ç –≥–æ—Ç–æ–≤—ã, –≤–≤–µ–¥–∏—Ç–µ /startgame"
        )
    finally:
        session.close()

def startgame_command(update: Update, context: CallbackContext) -> None:
    """
    Start the game after registration.
    """
    chat_id = update.effective_chat.id
    
    # Check if we're in a group chat
    if update.effective_chat.type not in ['group', 'supergroup']:
        update.message.reply_text("–≠—Ç–∞ –∏–≥—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö!")
        return
    
    # Check if there's an active registration
    if chat_id not in active_registrations or not active_registrations[chat_id]:
        update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∏–≥—Ä–æ–∫–∏ –¥–æ–ª–∂–Ω—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /join!")
        return
    
    # Check if we have enough players
    player_count = len(active_registrations[chat_id])
    if player_count < MIN_PLAYERS:
        update.message.reply_text(
            f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤! –¢—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º {MIN_PLAYERS}, "
            f"—Å–µ–π—á–∞—Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ {player_count}."
        )
        return
    
    # Check if we have too many players
    if player_count > MAX_PLAYERS:
        update.message.reply_text(
            f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–æ–≤! –ú–∞–∫—Å–∏–º—É–º {MAX_PLAYERS}, "
            f"—Å–µ–π—á–∞—Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ {player_count}."
        )
        return
    
    session = get_session()
    try:
        # Check if there's a game in progress
        existing_game = session.query(Game).filter(
            Game.chat_id == chat_id,
            Game.finished_at.is_(None)
        ).first()
        
        if existing_game and existing_game.state != GAME_STATES['IDLE']:
            update.message.reply_text("–í —ç—Ç–æ–º —á–∞—Ç–µ —É–∂–µ –∏–¥–µ—Ç –∏–≥—Ä–∞! –î–æ–∂–¥–∏—Ç–µ—Å—å –µ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
            return
        
        # Create new game or reuse existing one
        if not existing_game:
            game = Game(chat_id=chat_id, state=GAME_STATES['REGISTRATION'])
            session.add(game)
            session.commit()
        else:
            game = existing_game
            game.state = GAME_STATES['REGISTRATION']
            game.started_at = datetime.datetime.utcnow()
            game.finished_at = None
        
        # Generate roles
        roles = assign_roles(player_count)
        
        # Register all players and send them their roles
        update.message.reply_text("üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! –ö–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ –ø–æ–ª—É—á–∏—Ç —Å–≤–æ—é —Ä–æ–ª—å –≤ –ª–∏—á–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.")
        
        for i, telegram_user in enumerate(active_registrations[chat_id]):
            # Get or create user in database
            user = session.query(User).filter(User.user_id == telegram_user.id).first()
            if not user:
                user = User(
                    user_id=telegram_user.id,
                    username=telegram_user.username,
                    first_name=telegram_user.first_name,
                    last_name=telegram_user.last_name
                )
                session.add(user)
                session.commit()
            
            # Create game player
            game_player = GamePlayer(
                game_id=game.id,
                user_id=user.id,
                role=roles[i]
            )
            session.add(game_player)
            
            # Send role information to player
            role_info = get_role_description(roles[i])
            try:
                context.bot.send_message(
                    chat_id=telegram_user.id,
                    text=f"üîí –í–∞—à–∞ —Ä–æ–ª—å –≤ –∏–≥—Ä–µ Spy Sketch: *{roles[i]}*\n\n{role_info}",
                    parse_mode='Markdown'
                )
            except Exception as e:
                logger.error(f"Error sending role to user {telegram_user.id}: {e}")
                update.message.reply_text(
                    f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–æ–ª—å –∏–≥—Ä–æ–∫—É {telegram_user.first_name}. "
                    f"–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏ –≤—ã –Ω–∞—á–∞–ª–∏ —Å –Ω–∏–º –¥–∏–∞–ª–æ–≥."
                )
        
        # Create first round
        game_round = GameRound(
            game_id=game.id,
            round_number=1,
            state=GAME_STATES['PREPARATION']
        )
        session.add(game_round)
        
        # Update game state
        game.state = GAME_STATES['PREPARATION']
        session.commit()
        
        # Clear active registrations for this chat
        active_registrations[chat_id] = []
        
        # Move to preparation stage
        update.message.reply_text(
            "üîç –§–∞–∑–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –Ω–∞—á–∞–ª–∞—Å—å!\n\n"
            "–í—Å–µ –∏–≥—Ä–æ–∫–∏ –ø–æ–ª—É—á–∏–ª–∏ —Å–≤–æ–∏ —Ä–æ–ª–∏. –£ –≤–∞—Å –µ—Å—Ç—å –≤—Ä–µ–º—è, —á—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∏–º–∏.\n"
            "–°–∫–æ—Ä–æ –Ω–∞—á–Ω–µ—Ç—Å—è —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π —ç—Ç–∞–ø –∏–≥—Ä—ã!"
        )
        
        # Schedule transition to creative phase
        context.job_queue.run_once(
            transition_to_creative_phase,
            60,  # Preparation time in seconds
            context={"chat_id": chat_id, "game_id": game.id, "round_id": game_round.id}
        )
        
    except Exception as e:
        logger.error(f"Error starting game: {e}")
        update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        session.rollback()
    finally:
        session.close()

def get_role_description(role: str) -> str:
    """
    Get detailed description for a role.
    """
    if role == ROLES['LOYAL']:
        return (
            "–í—ã - –ª–æ—è–ª—å–Ω—ã–π –∞–≥–µ–Ω—Ç! –í–∞—à–∞ –∑–∞–¥–∞—á–∞ - –≤—ã—è–≤–∏—Ç—å —à–ø–∏–æ–Ω–æ–≤ —Å—Ä–µ–¥–∏ –∏–≥—Ä–æ–∫–æ–≤.\n\n"
            "‚Ä¢ –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤\n"
            "‚Ä¢ –ò—â–∏—Ç–µ —Å—Ç—Ä–∞–Ω–Ω—ã–µ –∏–ª–∏ –Ω–µ—É–º–µ—Å—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–¥–∞—Ç—å —à–ø–∏–æ–Ω–∞\n"
            "‚Ä¢ –í —Å–≤–æ–∏—Ö –∑–∞–¥–∞–Ω–∏—è—Ö —Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –¥–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥—Ä—É–≥–∏–º –ª–æ—è–ª—å–Ω—ã–º –∞–≥–µ–Ω—Ç–∞–º\n"
            "‚Ä¢ –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã - —à–ø–∏–æ–Ω—ã –ø–æ–ø—ã—Ç–∞—é—Ç—Å—è –≤–∞—Å –∑–∞–ø—É—Ç–∞—Ç—å"
        )
    elif role == ROLES['SPY']:
        return (
            "–í—ã - —à–ø–∏–æ–Ω! –í–∞—à–∞ –∑–∞–¥–∞—á–∞ - –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –Ω–µ–∑–∞–º–µ—á–µ–Ω–Ω—ã–º –∏ —Å–∞–±–æ—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä—É.\n\n"
            "‚Ä¢ –ü—Ä–∏—Ç–≤–æ—Ä—è–π—Ç–µ—Å—å –ª–æ—è–ª—å–Ω—ã–º –∞–≥–µ–Ω—Ç–æ–º\n"
            "‚Ä¢ –í —Ç–≤–æ—Ä—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞–Ω–∏—è—Ö —Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –±—ã—Ç—å –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã–º, –Ω–æ –Ω–µ —Å–ª–∏—à–∫–æ–º —è–≤–Ω–æ\n"
            "‚Ä¢ –ü—ã—Ç–∞–π—Ç–µ—Å—å –æ–±–≤–∏–Ω–∏—Ç—å –ª–æ—è–ª—å–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤, —á—Ç–æ–±—ã –æ—Ç–≤–µ—Å—Ç–∏ –ø–æ–¥–æ–∑—Ä–µ–Ω–∏—è –æ—Ç —Å–µ–±—è\n"
            "‚Ä¢ –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–π—Ç–µ—Å—å —Å –¥—Ä—É–≥–∏–º–∏ —à–ø–∏–æ–Ω–∞–º–∏, –µ—Å–ª–∏ –≤—ã –∑–∞–º–µ—Ç–∏—Ç–µ –∏—Ö"
        )
    elif role == ROLES['DOUBLE']:
        return (
            "–í—ã - –¥–≤–æ–π–Ω–æ–π –∞–≥–µ–Ω—Ç! –í–∞—à–∞ –∑–∞–¥–∞—á–∞ - –ø–æ–º–æ—á—å –ª–æ—è–ª—å–Ω—ã–º –∞–≥–µ–Ω—Ç–∞–º, –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º –Ω–µ —Ä–∞—Å–∫—Ä—ã—Ç—å —Å–µ–±—è —à–ø–∏–æ–Ω–∞–º.\n\n"
            "‚Ä¢ –í—ã –∑–Ω–∞–µ—Ç–µ, –∫—Ç–æ —à–ø–∏–æ–Ω—ã, –Ω–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—á–µ–Ω—å –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã\n"
            "‚Ä¢ –í —Ç–≤–æ—Ä—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞–Ω–∏—è—Ö –æ—Å—Ç–∞–≤–ª—è–π—Ç–µ —Ç–æ–Ω–∫–∏–µ –Ω–∞–º–µ–∫–∏ –ª–æ—è–ª—å–Ω—ã–º –∞–≥–µ–Ω—Ç–∞–º\n"
            "‚Ä¢ –ù–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–π—Ç–µ —Å–µ–±—è —Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ, –∏–Ω–∞—á–µ —à–ø–∏–æ–Ω—ã –≤—ã—á–∏—Å–ª—è—Ç –≤–∞—Å\n"
            "‚Ä¢ –í—ã –ø–æ–±–µ–∂–¥–∞–µ—Ç–µ –≤–º–µ—Å—Ç–µ —Å –ª–æ—è–ª—å–Ω—ã–º–∏ –∞–≥–µ–Ω—Ç–∞–º–∏"
        )
    else:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–π –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."

def transition_to_creative_phase(context: CallbackContext) -> None:
    """
    Transition from preparation to creative phase.
    """
    job_data = context.job.context
    chat_id = job_data["chat_id"]
    game_id = job_data["game_id"]
    round_id = job_data["round_id"]
    
    # This function will be implemented in creative.py handler
    # It will update the game state and start the creative phase
    # For now, we'll just announce the transition
    context.bot.send_message(
        chat_id=chat_id,
        text="üé® –¢–≤–æ—Ä—á–µ—Å–∫–∏–π —ç—Ç–∞–ø –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!\n\n–í—Å–µ –∏–≥—Ä–æ–∫–∏ –ø–æ–ª—É—á–∞—Ç –∑–∞–¥–∞–Ω–∏—è –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö."
    )
    
    # Here we would call a function from the creative phase handler
    # For example: start_creative_phase(context, chat_id, game_id, round_id)

def welcome_bot(update: Update, context: CallbackContext) -> None:
    """
    Welcome message when bot is added to a group chat.
    """
    # Check if this is a new chat member event and it's about the bot
    if not update.message or not update.message.new_chat_members:
        return
    
    bot_user = context.bot.get_me()
    for member in update.message.new_chat_members:
        if member.id == bot_user.id:
            # Bot was added to a group chat, send welcome message
            update.message.reply_text(
                "üëã –ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! –Ø –±–æ—Ç –¥–ª—è –∏–≥—Ä—ã Spy Sketch!\n\n"
                "–≠—Ç–æ –≥—Ä—É–ø–ø–æ–≤–∞—è –∏–≥—Ä–∞-–¥–µ–¥—É–∫—Ü–∏—è —Å —Ç–≤–æ—Ä—á–µ—Å–∫–∏–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
                "/join - –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n"
                "/startgame - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n"
                "/rules - –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã\n"
                "/help - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã"
            )
            break

def register_handlers(dispatcher):
    """Register all handlers for the registration phase."""
    dispatcher.add_handler(CommandHandler("start", start_command))
    dispatcher.add_handler(CommandHandler("help", help_command))
    dispatcher.add_handler(CommandHandler("rules", rules_command))
    dispatcher.add_handler(CommandHandler("join", join_command))
    dispatcher.add_handler(CommandHandler("startgame", startgame_command))
    dispatcher.add_handler(MessageHandler(Filters.status_update.new_chat_members, welcome_bot)) 